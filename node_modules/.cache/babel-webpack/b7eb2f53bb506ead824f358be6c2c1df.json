{"ast":null,"code":"import io from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../content.service\";\nimport * as i2 from \"@angular/forms\";\nconst SOCKET_ENDPOINT = 'localhost:3000';\nexport let ChatInboxComponent = /*#__PURE__*/(() => {\n  class ChatInboxComponent {\n    constructor(contentService) {\n      this.contentService = contentService;\n      this.socket = io('http://localhost:3000', {\n        transports: ['websocket']\n      });\n    }\n\n    ngOnInit() {\n      this.socket.on(this.socket.id, data => {\n        if (data) {\n          document.getElementById('message-list').appendChild(this.clientElement(data['senderRole'] + \":\" + data['content']));\n        }\n      });\n    }\n\n    clientElement(data) {\n      let element = document.createElement('li');\n      element.innerHTML = data;\n      element.style.background = 'white';\n      element.style.padding = '15px 30px';\n      element.style.margin = '10px';\n      element.style.textAlign = 'right';\n      return element;\n    }\n\n    SendMessage() {\n      if (!this.reference) return;\n      let data = {};\n      data['reference'] = this.reference;\n      data['content'] = this.message;\n      data['senderRole'] = 'Client';\n      data['sendTime'] = new Date().getTime();\n      this.socket.emit('client channel', data);\n      document.getElementById('message-list').appendChild(this.clientElement(data['senderRole'] + \":\" + data['content']));\n      this.message = '';\n    }\n\n    ConfirmRef() {\n      if (!this.reference) return; //should do some check here, maybe OTP\n\n      let topicData = {};\n      topicData['reference'] = this.reference;\n      this.socket.emit('new topic', topicData);\n      this.ngOnInit();\n      document.getElementById('confirmButton').setAttribute(\"disabled\", \"disabled\"); // fetch full content from server\n\n      let content = this.contentService.sendGetRequest(this.reference).subscribe(data => {\n        const displayMessage = document.getElementById('message-list');\n        displayMessage.innerHTML = '';\n        data.forEach((message, id) => {\n          displayMessage.appendChild(this.clientElement(message['senderRole'] + \": \" + message['content']));\n        });\n      });\n    }\n\n  }\n\n  ChatInboxComponent.ɵfac = function ChatInboxComponent_Factory(t) {\n    return new (t || ChatInboxComponent)(i0.ɵɵdirectiveInject(i1.ContentService));\n  };\n\n  ChatInboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatInboxComponent,\n    selectors: [[\"app-chat-inbox\"]],\n    decls: 11,\n    vars: 2,\n    consts: [[1, \"chat-messages\"], [1, \"chat-messages-create-container\"], [\"placeholder\", \"Please confirm your reference number\", \"id\", \"confirmButton\", \"type\", \"text\", 1, \"chat-messages-create-input\", 3, \"ngModel\", \"ngModelChange\"], [1, \"chat-messages-create-button\", 3, \"click\"], [1, \"chat-messages-show-container\"], [\"id\", \"message-list\", 1, \"chat-messages-show-list\"], [\"type\", \"text\", 1, \"chat-messages-create-input\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function ChatInboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function ChatInboxComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.reference = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ChatInboxComponent_Template_button_click_3_listener() {\n          return ctx.ConfirmRef();\n        });\n        i0.ɵɵtext(4, \" Confirm \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelement(6, \"ul\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 1);\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function ChatInboxComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.message = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ChatInboxComponent_Template_button_click_9_listener() {\n          return ctx.SendMessage();\n        });\n        i0.ɵɵtext(10, \" Send \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.reference);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.message);\n      }\n    },\n    directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\".chat-messages-show-container[_ngcontent-%COMP%]{background:#c3c3c3;height:400px;display:flex;flex-direction:column;overflow:auto}.chat-messages-show-list[_ngcontent-%COMP%]{list-style-type:none;margin:0;padding:0}.chat-messages-create-container[_ngcontent-%COMP%]{background:#616161;height:100px;display:flex;justify-content:center}.chat-messages-create-input[_ngcontent-%COMP%]{padding:12px;margin:29px 30px;flex:2}.chat-messages-create-button[_ngcontent-%COMP%]{height:50px;margin:auto 40px;width:100px}\"]\n  });\n  return ChatInboxComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}